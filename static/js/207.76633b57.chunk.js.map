{"version":3,"file":"static/js/207.76633b57.chunk.js","mappings":"wPAGaA,EAAaC,EAAAA,EAAAA,EAAH,mJAGN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAEjC,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOC,aAG5BC,EAAcN,EAAAA,EAAAA,GAAH,mJAGP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAEjC,SAAAF,GAAK,OAAIA,EAAMC,MAAME,OAAOG,cAI5BC,EAAaR,EAAAA,EAAAA,GAAH,wTAEJ,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MACjC,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MACvB,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,MAIzB,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,M,SCzBzCM,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAClC,OACI,UAACH,EAAD,YACA,SAACF,EAAD,UAAcI,KACd,SAACX,EAAD,UAAaY,Q,UCwCrB,EAxCgB,WACZ,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAZAE,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAAeH,GAASI,MAAK,SAAAC,GACzBA,IACAR,EAAUQ,EAASC,KAAKC,SACU,IAA/BF,EAASC,KAAKC,QAAQC,QACzBT,GAAU,SAKf,CAACC,KAGA,gCACCJ,GACG,wBACCA,EAAOa,KAAI,SAAAC,GAAG,OACX,SAAClB,EAAD,CAEAC,OAAQiB,EAAIjB,OACZC,QAASgB,EAAIhB,SAFRgB,EAAIC,UAOb,SAAC,IAAD,IAEFb,IACE,SAAChB,EAAD,mE,oNCzCC8B,EAAY,8BACZC,EAAe,mCCGtBC,EAAO,mCAAG,WAAMC,GAAN,gGAEWC,IAAAA,IAAUD,GAFrB,cAENV,EAFM,yBAGLA,GAHK,gCAKZY,EAAAA,GAAAA,MAAY,gDALA,yDAAH,sDASAC,EAAa,SAAAlB,GACxB,IAAMe,EAAG,UAAMH,EAAN,mBAA0BZ,EAA1B,4BAAqDa,EAArD,0BACT,OAAOC,EAAQC,IAGJI,EAAkB,SAAAnB,GAC7B,IAAMe,EAAG,UAAMH,EAAN,mBAA0BZ,EAA1B,oBAA6Ca,EAA7C,0BACT,OAAOC,EAAQC,IAGJK,EAAc,WACzB,IAAML,EAAG,UAAMH,EAAN,sCAA6CC,GACtD,OAAOC,EAAQC,IAGJM,EAAY,SAAAC,GACvB,IAAMP,EAAG,UAAMH,EAAN,kCAAyCC,EAAzC,kBAA+DS,EAA/D,8CACT,OAAOR,EAAQC,IAGJQ,EAAU,SAAAvB,GACrB,IAAMe,EAAG,UAAMH,EAAN,mBAA0BZ,EAA1B,4BAAqDa,EAArD,mBACT,OAAOC,EAAQC","sources":["components/Reviews/ReviewsStyled.jsx","components/Reviews/ReviewsItem.jsx","components/Reviews/Reviews.jsx","services/basicData.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\n//Стилизованный текст отзыва\nexport const ReviewText = styled.p`\n    font-family: Raleway, sans-serif;\n    font-weight: 500;\n    font-size: ${props => props.theme.spacing(3)};\n    line-height: 1.2;\n    color: ${props => props.theme.colors.textColor};\n`;\n\nexport const ReviewTitle = styled.h2`\n    font-family: Raleway, sans-serif;\n    font-weight: 700;\n    font-size: ${props => props.theme.spacing(5)};\n    line-height: 1.2;\n    color: ${props => props.theme.colors.titleColor};\n`;\n\n//Стили блока для отдельного отзыва\nexport const ReviewItem = styled.li`\n    list-style: none;\n    text-indent: ${props => props.theme.spacing(3)};\n    padding: ${props => props.theme.spacing(2)};\n    border-radius: ${props => props.theme.spacing(1)};\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    :not(:last-child) {\n        margin-bottom: ${props => props.theme.spacing(2)};\n    }\n`;","import { ReviewText, ReviewTitle, ReviewItem } from './ReviewsStyled';\nimport PropTypes from 'prop-types';\n\nexport const ReviewsItem = ({ author, content }) => {\n    return (\n        <ReviewItem>\n        <ReviewTitle>{author}</ReviewTitle>\n        <ReviewText>{content}</ReviewText>\n        </ReviewItem>\n    );\n};\n\nReviewsItem.propTypes = {\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/api';\nimport { ReviewText } from './ReviewsStyled';\nimport { ReviewsItem } from './ReviewsItem';\nimport { Spinner } from '../AppStyled';\n\nconst Reviews = () => {\n    const [review, setReview] = useState(null);\n    const [noData, setNoData] = useState(false);\n    const { movieId } = useParams();\n\n    //Получаем даннык об актёрах и пока загружаем включаем спиннер\n    useEffect(() => {\n        API.getReviews(movieId).then(response => {\n        if (response) {\n            setReview(response.data.results);\n            if(response.data.results.length===0){\n            setNoData(true);}\n        } else {\n            return;\n        }\n        });\n    }, [movieId]);\n\n    return (\n        <>\n        {review ? (\n            <ul>\n            {review.map(rev => (\n                <ReviewsItem\n                key={rev.id}\n                author={rev.author}\n                content={rev.content}\n                />\n            ))}\n            </ul>\n        ) : (\n            <Spinner />\n        )}\n        {(noData) && (\n            <ReviewText>Sorry, we don't have any reviews for this movie</ReviewText>\n        )}\n        </>\n    );\n};\n\nexport default Reviews;","export const BASIC_URL = 'https://api.themoviedb.org/';\nexport const PERSONAL_KEY = '515cd027603607ee4f27d09c5fb79ec3'; //Ключ API (v3 auth)\n// Ключ доступа к API (v4 auth)\nexport const PERSONAL_KEY_V4 =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YTczMjI4OWZhYWEwMjFiMzAwYzY3YzgwYzM1Y2FkMSIsInN1YiI6IjYyNmU1NzcyMjQ1ZGJlMzM3ZjQzNzgwOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nGXh-5GwT2pl8pJ7su6oK_01uD4EgHcGzKoNAn_Ubao';\n\n/* Пример API-запроса\nhttps://api.themoviedb.org/3/movie/550?api_key=7a732289faaa021b300c67c80c35cad1 */\n","import axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { BASIC_URL, PERSONAL_KEY } from './basicData';\n\nconst getData = async url => {\n  try {\n    const response = await axios.get(url);\n    return response;\n  } catch (error) {\n    toast.error('Sorry, We don`t have this film`s information');\n  }\n};\n\nexport const getReviews = movieId => {\n  const url = `${BASIC_URL}3/movie/${movieId}/reviews?api_key=${PERSONAL_KEY}&language=en-US&page=1`;\n  return getData(url);\n};\n\nexport const getMovieDetails = movieId => {\n  const url = `${BASIC_URL}3/movie/${movieId}?api_key=${PERSONAL_KEY}&language=en-US&page=1`;\n  return getData(url);\n};\n\nexport const getTranding = () => {\n  const url = `${BASIC_URL}3/trending/all/day?api_key=${PERSONAL_KEY}`;\n  return getData(url);\n};\n\nexport const getMovies = query => {\n  const url = `${BASIC_URL}3/search/movie?api_key=${PERSONAL_KEY}&query=${query}&language=en-US&page=1&include_adult=false`;\n  return getData(url);\n};\n\nexport const getCast = movieId => {\n  const url = `${BASIC_URL}3/movie/${movieId}/credits?api_key=${PERSONAL_KEY}&language=en-US`;\n  return getData(url);\n};\n"],"names":["ReviewText","styled","props","theme","spacing","colors","textColor","ReviewTitle","titleColor","ReviewItem","ReviewsItem","author","content","useState","review","setReview","noData","setNoData","movieId","useParams","useEffect","API","then","response","data","results","length","map","rev","id","BASIC_URL","PERSONAL_KEY","getData","url","axios","toast","getReviews","getMovieDetails","getTranding","getMovies","query","getCast"],"sourceRoot":""}